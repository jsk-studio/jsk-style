@mixin set($key, $value) {
    @if $value != x {
      #{$key}: $value;
    }
}
@mixin set-i($key, $value, $idx) {
  @if length($value) >= $idx {
    @include set($key, nth($value, $idx));
  }
}

@mixin set-props($props, $values) {
  @for $i from 0 through length($props) - 1 {
    $prop: nth($props, $i + 1);
    $idx: $i % length($values) + 1;
    @if $i == 3 and length($values) == 3 {
      @include set(nth($props, 4), nth($values, 2));
    } @else {
      @include set($prop, nth($values, $idx));
    }
  }
}

@function get($props, $i, $value: x) {
  $val: $value;
  @if type-of($props) == 'map' {
    @if map-has-key($props, $i) {
      $val: map-get($props, $i);
    }
  } @else if type-of($i) == 'number' and length($props) >= $i {
    $val: nth($props, $i);
  }
  @if $val == x {
    $val: $value;
  }
  @return $val;
}

@function get-by($props, $type, $count: x) {
  $mprops: ();
  @each $prop in $props {
    $mtype: get($type, 1);
    @if type-of($prop) == $mtype and ($count == x or $count > length($mprops)) {
      @if $mtype == 'number' and length($type) == 2 {
        $unit: get($type, 2);
        @if $unit == unit($prop) {
          $mprops: append($mprops, $prop);
        }
      } @else {
        $mprops: append($mprops, $prop);
      }
    }
  }
  @if length($mprops) == 0 {
    @return x;
  }
  @if length($mprops) == 1 or $count == 1 {
    @return get($mprops, 1);
  }
  @return $mprops;
}

@function has($props, $value) {
  @if type-of($props) == 'list' {
    @return index($props, $value) != null;
  }
  @return false;
}

// url
@mixin set-url($prop, $url) {
  @if($url != x) {
    $match-char: false;
    @each $char in $default-url-chars {
      @if (str-index($url, $char) == 1) {
        $match-char: true;
      }
    }
    @if ($default-url-path != x and not $match-char) {
      @include set($prop, url(#{$default-url-path}#{$url}));
    } @else {
      @include set($prop, url($url));
    }
  }
}

@mixin set-image-url($url) {
  @include set-url(background-image, $url);
}

@function strip-units($number){
  @return $number / ($number * 0 + 1);
}

@function str-replace($subject, $search, $replace) {
  $search-start: str-index($subject, $search);
 
  @if $search-start == null {
    @return $subject;
  }
 
  $result: str-slice($subject, 0, $search-start - 1);
  $result: $result + $replace;
  $result: $result + str-slice($subject, $search-start + str-length($search));
 
  @return $result;
}
