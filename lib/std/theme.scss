@mixin theme($name) {
    @if ($name) {
        @at-root #{$default-app-container}.#{$name} & {
            @content;
        }
    }
}

@function get-color($color, $theme: x) {
  $color-map: get($default-theme-colors, $theme, $default-colors);
  @return get($color-map, $color, $color);
}

@function get-theme-color($colors, $color-map: $default-colors) {
    $theme-colors: ();
    @each $name in $colors {
        $color: map-get($color-map, $name);
        @if $color != null {
            $theme-colors: append($theme-colors, $color);
        } @else if $color-map == $default-colors {
            $theme-colors: append($theme-colors, $name);
        }
    }
    @return $theme-colors;
}

@mixin set-color($color) {
    @include set-i(color, $color, 1);
    $bgcolor: get($color, 2);
    $bgtype: type-of($bgcolor);

    @if $bgtype == 'color' {
      @include set(background-color, $bgcolor);
      @if length($color) == 2 {
        @include set(border-color, $bgcolor);
      }
    } @else {
      @include set(background-image, $bgcolor);
    }
  
    @if length($color) == 3 {
      @include set-i(border-color, $color, 3);
    }
  }
  
@mixin set-theme-color($colors, $box-colors: ()) {
    $colors: join($colors, $box-colors);
    @include set-color(get-theme-color($colors));
    @each $name, $theme in $default-theme-colors {
        @include theme($name) {
            $theme-colors: get-theme-color($colors, $theme);
            @include set-color($theme-colors)
        }
    }
  }
  